package edu.uci.ics.cs221.storage;

import java.util.Iterator;
import java.util.Map;


/**
 * In our project, DocumentStore is an external disk-based storage for original document text.
 * Our project only requires append-only implementation of the documents and inverted index. No updates or deletion required.
 *
 */
public interface DocumentStore extends AutoCloseable {

    /**
     * Adds a document to the Document Store. Document is not guaranteed to be persisted until `close()` is called.
     * Note: add document with an existing docID will effectively update the documentID.
     * To achieve append-only, always use a new docID, which could be generated by incrementing number based on `size()`.
     *
     * @param docID, document ID, should not duplicate with an existing document ID to avoid updates.
     * @param document, the document to add, should not be null
     */
    void addDocument(int docID, Document document);

    /**
     * Retrieves a document from the document store.
     * @param docID
     * @return the document corresponding to docID, null if not exists
     */
    Document getDocument(int docID);

    /**
     * Performs a full table scan on the document store.
     * @return an iterator of < DocID, Document > pairs.
     */
    Iterator<Map.Entry<Integer, Document>> iterator();

    /**
     * Gets the size of the Document Store.
     * (Size could be used externally to assign document ID.)
     * @return number of documents in the Document Store.
     */
    long size();

    /**
     * Closes the document store
     *
     */
    void close();

}
